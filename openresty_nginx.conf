
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
	worker_connections  1024;
}


http {
	include       mime.types;
	default_type  application/octet-stream;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
			  '$status $body_bytes_sent "$http_referer" '
			  '"$http_user_agent" "$http_x_forwarded_for"';

	access_log  /var/log/nginx/access.log  main;

	sendfile        on;
#tcp_nopush     on;

#keepalive_timeout  0;
	keepalive_timeout  65;

#gzip  on;


	limit_req_zone $binary_remote_addr zone=myRateLimit:10m rate=100r/s;
	limit_conn_zone $binary_remote_addr zone=perip:10m;
	limit_conn_zone $server_name zone=perserver:10m;

	upstream sample {
		server 47.110.247.239:33331;
		server 39.106.18.35:33331;
		server 47.102.219.229:33331;
		server 120.79.121.24:33331;
	}

	server {
		listen 23232;
		limit_conn perip 10;
		limit_conn perserver 100;
		location / {
			limit_req zone=myRateLimit burst=200 nodelay;
			proxy_redirect off;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded_Proto $scheme;
			proxy_set_header Host $http_host;
			proxy_set_header X-NginX-Proxy true;
			proxy_set_header Connection "";
			proxy_http_version 1.1;
			proxy_pass http://sample;
		}
		location /auth {
			#TODO add token auth
			return 403;
		}

		location /api/v1/call/application {
			if ($request_method != POST) {                                       
				return 405;                                                      
			}                                                                    

			set $upstream '';                                                
			access_by_lua '                                                  
				//ngx.req.read_body()                                          
				local data = ngx.req.get_body_data()                         
				local match,err = ngx.re.match(data, "CreateContract")                
				if match then                                                
					ngx.var.upstream = "127.0.0.1:23232/auth"
				else                                                         
					ngx.var.upstream = "127.0.0.1:23232/"
				end                                                          
			';                                                           

			proxy_pass http://${upstream};
		}
	}
}
